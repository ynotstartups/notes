#!/usr/bin/env python3.10
import glob
import os
import re
from os.path import join, exists
from collections import defaultdict

# RANDOM TODO
# I can generate a post with all of links to external site

"""
This file generate the `## Links to this note`/bi directional link section

Assumptions/Requirements

- all markdown files are in ./notes/ with no folder hierarchy

read all markdown files
1. remove_bi_directional_link_section
2. find all links
3. generate links mapping
4. generate bi directional link section

"""

# csv data file is generated by `make generate-bi-directional-links`
NOTE_TO_IGNORE = "./notes/bi-directional-links.md"

PATH_TO_NOTES = "./notes/"
ALL_NOTES_GLOB = f"./notes/*.md"

LINK_REGEX = re.compile(r'\[[^\]]+\]\(([^)]+)\)')

BI_DIRECTIONAL_LINKS_SECTION_TITLE = "## Links to this note"

def get_all_notes():
    all_notes = glob.glob(ALL_NOTES_GLOB)
    all_notes.remove(NOTE_TO_IGNORE)
    return all_notes

def get_title_of_file(filepath):
    with open(join(PATH_TO_NOTES, filepath), "r") as f:
        first_line = f.readline()
        assert first_line.startswith("# "), f"{filepath} doesn't have title!"
        return first_line.removeprefix("# ").strip()

def remove_bi_directional_link_section(filepath):
    all_lines = []
    with open(filepath, "r") as f:
        for line in f:
            if line.startswith(BI_DIRECTIONAL_LINKS_SECTION_TITLE):
                break
            all_lines.append(line)

    with open(filepath, "w") as f:
        for line in all_lines:
            f.write(line)

def main():
    for path in get_all_notes():
        remove_bi_directional_link_section(path)

    all_path_and_link = []
    for path in get_all_notes():
        with open(path, 'r') as f:
            links = LINK_REGEX.findall(f.read())

            for link in links:
                all_path_and_link.append((path, link))


    all_path_and_internal_link = []
    for path, link in all_path_and_link:
        # filter out external links
        if link.startswith("http"):
            continue

        # filter out section links
        if "#" in link:
            continue

        # filter out link to images
        if "images/" in link:
            continue

        assert exists(join(PATH_TO_NOTES, link)), f"{PATH_TO_NOTES} {link} doesn't exist"

        all_path_and_internal_link.append((path, link))

    bi_directional_links = defaultdict(set)
    for path, internal_link in all_path_and_internal_link:

        path = path.removeprefix(PATH_TO_NOTES)

        bi_directional_links[internal_link].add(path)

    for note_being_pointed, notes_pointing in bi_directional_links.items():

        sorted_notes_pointing = sorted(notes_pointing)

        with open(join(PATH_TO_NOTES, note_being_pointed), "a") as f:
            f.write(f"{BI_DIRECTIONAL_LINKS_SECTION_TITLE}\n\n")
            for note_pointing in sorted_notes_pointing:
                title = get_title_of_file(note_pointing)
                f.write(f"[{title}]({note_pointing})\n\n")


if __name__ == "__main__":
    main()
